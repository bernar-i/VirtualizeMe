#!/usr/bin/env ruby

require 'rconfig'

module SkyCloud
  class IaasManager
    attr_reader :oVim

    def initilize
      @oVim = nil
    end

    def cloneVm aParams
      oRbVmomiManager = RbVmomiManager.new
      oVim = oRbVmomiManager.connect

      oVm = oVim.serviceInstance.find_datacenter.find_vm(aParams[:template])

      linuxGuest = RbVmomi::VIM.CustomizationLinuxPrep
      linuxGuest.domain = "etna-alternance.eu"
      linuxGuest.hostName = RbVmomi::VIM.CustomizationFixedName
      linuxGuest.hostName.name = "toto"
     
      ipSettings = RbVmomi::VIM.CustomizationGlobalIPSettings
      ipSettings.dnsServerList = [ "8.8.8.8", "4.4.4.4" ]
      ipSettings.dnsSuffixList = [ "etna-alternance.eu" ]

      mapping = RbVmomi::VIM.CustomizationAdapterMapping
      mapping.adapter = RbVmomi::VIM.CustomizationIPSettings
      mapping.adapter.ip = RbVmomi::VIM.CustomizationFixedIp
      mapping.adapter.ip.ipAddress = "192.168.202.101"
 
      customization = RbVmomi::VIM.CustomizationSpec(:identity => linuxGuest, :globalIPSettings => ipSettings, :nicSettingMap => [ mapping ] )

      relocateSpec = RbVmomi::VIM.VirtualMachineRelocateSpec
      spec = RbVmomi::VIM.VirtualMachineCloneSpec(:location => relocateSpec, :powerOn => false, :template => false, :customization => customization)

      oVm.CloneVM_Task(:folder => oVm.parent, :name => aParams[:name], :spec => spec).wait_for_completion

      oRbVmomiManager.close
    end

    def powerOn sParams
      oRbVmomiManager = RbVmomiManager.new
      oVim = oRbVmomiManager.connect

      oVm = oVim.serviceInstance.find_datacenter.find_vm(sParams[:vm])
      oVm.PowerOnVM_Task.wait_for_completion

      oRbVmomiManager.close
    end

    def powerOff sParams
      oRbVmomiManager = RbVmomiManager.new
      oVim = oRbVmomiManager.connect

      oVm = oVim.serviceInstance.find_datacenter.find_vm(sParams[:vm])
      oVm.PowerOffVM_Task.wait_for_completion

      oRbVmomiManager.close
    end

    def shutdown sParams
      oRbVmomiManager = RbVmomiManager.new
      oVim = oRbVmomiManager.connect

      oVm = oVim.serviceInstance.find_datacenter.find_vm(sParams[:vm])
      oVm.ShutdownGuest

      oRbVmomiManager.close
    end

   def hostname sParams
     ssh = Net::SSH.start('192.168.202.100', 'root')
     res = ssh.exec!('ls -al')
     ssh.close
     puts res
   end

  end
end
